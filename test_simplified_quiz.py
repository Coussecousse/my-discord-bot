#!/usr/bin/env python3
"""
Test de la logique simplifi√©e des quiz sans table quiz_winners.
"""

class MockQuizClient:
    def __init__(self):
        self.quiz_correct_answers = {}  # Cache des r√©ponses correctes {guild_id: {quiz_id: [user_ids]}}
    
    def simulate_correct_answer(self, guild_id, quiz_id, user_id, username):
        """Simule une r√©ponse correcte."""
        # Marquer la r√©ponse comme correcte dans le cache
        if guild_id not in self.quiz_correct_answers:
            self.quiz_correct_answers[guild_id] = {}
        if quiz_id not in self.quiz_correct_answers[guild_id]:
            self.quiz_correct_answers[guild_id][quiz_id] = []
        
        if user_id in self.quiz_correct_answers[guild_id][quiz_id]:
            return False, f"Tu as d√©j√† r√©pondu correctement √† ce quiz !"
        
        self.quiz_correct_answers[guild_id][quiz_id].append(user_id)
        return True, f"Bravo {username} ! Bonne r√©ponse, tu gagnes 10 points !"
    
    def start_new_quiz(self, guild_id, quiz_id):
        """Simule le d√©marrage d'un nouveau quiz."""
        # Nettoyer le cache des r√©ponses correctes pour ce serveur
        if guild_id in self.quiz_correct_answers:
            self.quiz_correct_answers[guild_id].clear()
        print(f"üÜï Nouveau quiz {quiz_id} pour le serveur {guild_id} - cache nettoy√©")

def test_simplified_quiz_logic():
    """Test de la logique simplifi√©e des quiz."""
    print("üß™ Test de la logique simplifi√©e des quiz")
    print("-" * 50)
    
    client = MockQuizClient()
    
    guild_id = 123456
    quiz_id_1 = 1
    quiz_id_2 = 2
    
    # Test 1: Premi√®re r√©ponse correcte
    print("Test 1: Premi√®re r√©ponse correcte")
    success, message = client.simulate_correct_answer(guild_id, quiz_id_1, 1001, "Alice")
    print(f"R√©sultat: {success} - {message}")
    
    # Test 2: Deuxi√®me utilisateur r√©pond correctement
    print("\nTest 2: Deuxi√®me utilisateur r√©pond correctement")
    success, message = client.simulate_correct_answer(guild_id, quiz_id_1, 1002, "Bob")
    print(f"R√©sultat: {success} - {message}")
    
    # Test 3: Alice essaie de r√©pondre √† nouveau
    print("\nTest 3: Alice essaie de r√©pondre √† nouveau")
    success, message = client.simulate_correct_answer(guild_id, quiz_id_1, 1001, "Alice")
    print(f"R√©sultat: {success} - {message}")
    
    # Test 4: Nouveau quiz d√©marre
    print("\nTest 4: Nouveau quiz d√©marre")
    client.start_new_quiz(guild_id, quiz_id_2)
    
    # Test 5: Alice peut maintenant r√©pondre au nouveau quiz
    print("\nTest 5: Alice r√©pond au nouveau quiz")
    success, message = client.simulate_correct_answer(guild_id, quiz_id_2, 1001, "Alice")
    print(f"R√©sultat: {success} - {message}")
    
    # √âtat final du cache
    print(f"\nüìä √âtat final du cache: {client.quiz_correct_answers}")
    
    print("\n‚úÖ Test termin√© avec succ√®s !")

if __name__ == "__main__":
    test_simplified_quiz_logic()
